import numpy as np
import calc_channel as cc

GHZ = [
    [0.4812, 0,         0,         0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0,         0,         0.4596],
    [0,      0.006503,  0,         0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0,         0.0004135, 0],     
    [0,      0,         0.0008917, 0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0.0004135, 0,         0],     
    [0,      0,         0,         0.0001813, 0,         0,        0,         0,         0,         0,         0,        0,         3.433e-05, 0,         0,         0],     
    [0,      0,         0,         0,         0.001899,  0,        0,         0,         0,         0,         0,        0.0005545, 0,         0,         0,         0],     
    [0,      0,         0,         0,         0,         0.00805,  0,         0,         0,         0,         0.006679, 0,         0,         0,         0,         0],     
    [0,      0,         0,         0,         0,         0,        5.584e-05, 0,         0,         4.989e-07, 0,        0,         0,         0,         0,         0],     
    [0,      0,         0,         0,         0,         0,        0,         0.001171,  0.0005545, 0,         0,        0,         0,         0,         0,         0],     
    [0,      0,         0,         0,         0,         0,        0,         0.0005545, 0.001171,  0,         0,        0,         0,         0,         0,         0],     
    [0,      0,         0,         0,         0,         0,        4.989e-07, 0,         0,         5.584e-05, 0,        0,         0,         0,         0,         0],     
    [0,      0,         0,         0,         0,         0.006679, 0,         0,         0,         0,         0.00805,  0,         0,         0,         0,         0],     
    [0,      0,         0,         0,         0.0005545, 0,        0,         0,         0,         0,         0,        0.001899,  0,         0,         0,         0],     
    [0,      0,         0,         3.433e-05, 0,         0,        0,         0,         0,         0,         0,        0,         0.0001813, 0,         0,         0],     
    [0,      0,         0.0004135, 0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0.0008917, 0,         0],     
    [0,      0.0004135, 0,         0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0,         0.006503,  0],     
    [0.4596, 0,         0,         0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0,         0,         0.4812],
]
# 0.940876

GHZ = [
    [0.4864,   0,         0,         0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0,         0,         0.4406],
    [0,        0.004329,  0,         0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0,         0.0003899, 0],     
    [0,        0,         0.0008959, 0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0.0003899, 0,         0],     
    [0,        0,         0,         0.00034,   0,         0,        0,         0,         0,         0,         0,        0,         0.0001047, 0,         0,         0],     
    [0,        0,         0,         0,         0.001844,  0,        0,         0,         0,         0,         0,        0.0007361, 0,         0,         0,         0],     
    [0,        0,         0,         0,         0,         0.004601, 0,         0,         0,         0,         0.00274,  0,         0,         0,         0,         0],     
    [0,        0,         0,         0,         0,         0,        5.125e-05, 0,         0,         6.513e-07, 0,        0,         0,         0,         0,         0],     
    [0,        0,         0,         0,         0,         0,        0,         0.001503,  0.0007361, 0,         0,        0,         0,         0,         0,         0],     
    [0,        0,         0,         0,         0,         0,        0,         0.0007361, 0.001503,  0,         0,        0,         0,         0,         0,         0],     
    [0,        0,         0,         0,         0,         0,        6.513e-07, 0,         0,         5.125e-05, 0,        0,         0,         0,         0,         0],     
    [0,        0,         0,         0,         0,         0.00274,  0,         0,         0,         0,         0.004601, 0,         0,         0,         0,         0],     
    [0,        0,         0,         0,         0.0007361, 0,        0,         0,         0,         0,         0,        0.001844,  0,         0,         0,         0],     
    [0,        0,         0,         0.0001047, 0,         0,        0,         0,         0,         0,         0,        0,         0.00034,   0,         0,         0],     
    [0,        0,         0.0003899, 0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0.0008959, 0,         0],     
    [0,        0.0003899, 0,         0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0,         0.004329,  0],     
    [  0.4406, 0,         0,         0,         0,         0,        0,         0,         0,         0,         0,        0,         0,         0,         0,         0.4864],
    ]

GHZ = np.array(GHZ)
dim = GHZ.shape[0]

p_even = 0
p_odd = 0
for i in range(dim):
    a = GHZ[i][i]
    b = GHZ[i][dim - i - 1]
    # in basis of (|00> + |11>) and (|00> - |11>)
    p_even += (a + b) / 2
    p_odd += (a - b) / 2

ps = [p_even, p_odd]
p = 0.5
ps = [p, 1 - p]
print(p_even, p_odd)


def get_p(ks, p_g):
    result = 1
    for k in ks:
        if k == 0:
            result *= (1 - p_g)
        else:
            result *= p_g / 15
    return result

def get_final_result(err_model: cc.ErrorModel):
    c_even = np.zeros((4, 4, 4, 4))
    c_odd = np.zeros((4, 4, 4, 4))
    probs = 0

    # channel for data qubit
    for i in range(256):
        dsi = cc.get_n_digits(i, 4, 4)
        p_i = get_p(dsi, err_model.p_g)
        # channel for GHZ qubit
        # X error does not matter, Z error can flip measurement outcome
        for j in range(256):
            dsj = cc.get_n_digits(j, 4, 4)
            p_j = get_p(dsj, err_model.p_g)
            flip = 0

            for dj in dsj:
                if dj == 2 or dj == 3:
                    flip = 1 - flip

            p_success = ps[flip] * p_i * p_j
            probs += p_success
            e, o = measure_GHZ(err_model.p_m)
            c_even[dsi] += p_success * e
            c_odd[dsi] += p_success * o

    print(probs)
    return c_even / probs, c_odd / probs



def measure_GHZ(p_m):
    even = p_m ** 4 + (1 - p_m) ** 4 + 6 * p_m ** 2 * (1 - p_m) ** 2
    odd = 4 * p_m * (1 - p_m) ** 3 + 4 * p_m ** 3 * (1 - p_m)
    return even, odd


c_even, c_odd = get_final_result(cc.ErrorModel(0.1, 0.006, 0.006))
print(c_even[0, 0, 0])
print(c_odd[0, 0, 0])
# print(c_odd)
